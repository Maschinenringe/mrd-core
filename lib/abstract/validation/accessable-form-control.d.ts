import { IValidator } from '../../interface/validation/i-validator';
import { FormControl } from '@angular/forms';
import { IAccessableFormControl } from '../../interface/validation/i-accessable-form-control';
import { Observable } from 'rxjs';
export declare class AccessableFormControl<TType = any> implements IAccessableFormControl<AccessableFormControl<TType>, TType> {
    control: FormControl;
    showAs: (value: any) => any;
    convertTo: (value: any) => any;
    private required$;
    private validators$;
    private blocked$;
    initialize(formState?: any, validators?: IValidator[]): void;
    validateWith(validators?: IValidator[]): AccessableFormControl;
    setValue(value: any): AccessableFormControl;
    reset(value: TType): AccessableFormControl;
    markAsUsed(): AccessableFormControl;
    markAsUnused(): AccessableFormControl;
    markAsDirty(): AccessableFormControl;
    markAsTouched(): AccessableFormControl;
    disable(): AccessableFormControl;
    enable(): AccessableFormControl;
    blockControls(): void;
    unblockControls(): void;
    get disabled(): boolean;
    get valid(): boolean;
    get validators(): IValidator[];
    get error(): IValidator;
    get value(): any;
    set value(value: any);
    get valueChanges(): Observable<any>;
    get required(): boolean;
    get touched(): boolean;
    get dirty(): boolean;
    get blocked(): boolean;
}
