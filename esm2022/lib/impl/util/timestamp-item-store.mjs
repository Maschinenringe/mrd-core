import { ItemStore } from "./item-store";
import { Util } from "./util";
import * as _ from 'underscore';
export class TimestampItemStore extends ItemStore {
    itemLifetimeInSeconds;
    static ITEM_TIMESTAMP_KEY = '__timestamp__';
    wasFilled;
    constructor(identifier, itemLifetimeInSeconds, transform) {
        super(identifier, transform);
        this.itemLifetimeInSeconds = itemLifetimeInSeconds;
        this.wasFilled = false;
    }
    updateItems(items) {
        super.updateItems(items);
        _.each(this.items, (item) => this.trackItem(item));
        this.wasFilled = true;
    }
    clear() {
        super.clear();
        this.wasFilled = false;
    }
    update(item) {
        super.update(item);
        this.trackItem(item);
    }
    push(item) {
        super.push(item);
        this.trackItem(item);
    }
    isItemValid(identifier) {
        let itemInStore = null;
        for (const item of this.items) {
            if (item[this.identifier] === identifier) {
                itemInStore = item;
                break;
            }
        }
        if (!Util.isDefined(itemInStore)) {
            return false;
        }
        const currentTimeStamp = Util.getCurrentUnixTimestamp();
        return (currentTimeStamp - this.itemLifetimeInSeconds) < itemInStore[TimestampItemStore.ITEM_TIMESTAMP_KEY];
    }
    isStoreValid() {
        if (!this.wasFilled) {
            return false;
        }
        if (_.isEmpty(this.items)) {
            return false;
        }
        return _.all(this.items, (item) => this.isItemValid(item[this.identifier]));
    }
    trackItem(item) {
        item[TimestampItemStore.ITEM_TIMESTAMP_KEY] = Util.getCurrentUnixTimestamp();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXN0YW1wLWl0ZW0tc3RvcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tcmQtY29yZS9zcmMvbGliL2ltcGwvdXRpbC90aW1lc3RhbXAtaXRlbS1zdG9yZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQ3ZDLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxLQUFLLENBQUMsTUFBTSxZQUFZLENBQUM7QUFFaEMsTUFBTSxPQUFPLGtCQUEyQixTQUFRLFNBQWlCO0lBUXJEO0lBTkgsTUFBTSxDQUFVLGtCQUFrQixHQUFHLGVBQWUsQ0FBQztJQUVwRCxTQUFTLENBQVU7SUFFM0IsWUFDRSxVQUFlLEVBQ1AscUJBQTZCLEVBQ3JDLFNBQXlDO1FBRXpDLEtBQUssQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFIckIsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUFRO1FBSXJDLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0lBQ3pCLENBQUM7SUFFTSxXQUFXLENBQUMsS0FBZTtRQUNoQyxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0lBQ3hCLENBQUM7SUFFTSxLQUFLO1FBQ1YsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2QsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7SUFDekIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxJQUFZO1FBQ3hCLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRU0sSUFBSSxDQUFDLElBQVk7UUFDdEIsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFFTSxXQUFXLENBQUMsVUFBZTtRQUNoQyxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDdkIsS0FBSSxNQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQzVCLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxVQUFVLEVBQUU7Z0JBQ3hDLFdBQVcsR0FBRyxJQUFJLENBQUM7Z0JBQ25CLE1BQU07YUFDUDtTQUNGO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDaEMsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7UUFDeEQsT0FBTyxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQzlHLENBQUM7SUFFTSxZQUFZO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ25CLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRU8sU0FBUyxDQUFDLElBQVk7UUFDNUIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGtCQUFrQixDQUFDLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7SUFDL0UsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SXRlbVN0b3JlfSBmcm9tIFwiLi9pdGVtLXN0b3JlXCI7XHJcbmltcG9ydCB7VXRpbH0gZnJvbSBcIi4vdXRpbFwiO1xyXG5pbXBvcnQgKiBhcyBfIGZyb20gJ3VuZGVyc2NvcmUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRpbWVzdGFtcEl0ZW1TdG9yZTxUTW9kZWw+IGV4dGVuZHMgSXRlbVN0b3JlPFRNb2RlbD4ge1xyXG5cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IElURU1fVElNRVNUQU1QX0tFWSA9ICdfX3RpbWVzdGFtcF9fJztcclxuXHJcbiAgcHJpdmF0ZSB3YXNGaWxsZWQ6IGJvb2xlYW47XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgaWRlbnRpZmllcjogYW55LFxyXG4gICAgcHJpdmF0ZSBpdGVtTGlmZXRpbWVJblNlY29uZHM6IG51bWJlcixcclxuICAgIHRyYW5zZm9ybT86IChpdGVtczogVE1vZGVsW10pID0+IFRNb2RlbFtdXHJcbiAgKSB7XHJcbiAgICBzdXBlcihpZGVudGlmaWVyLCB0cmFuc2Zvcm0pO1xyXG4gICAgdGhpcy53YXNGaWxsZWQgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB1cGRhdGVJdGVtcyhpdGVtczogVE1vZGVsW10pOiB2b2lkIHtcclxuICAgIHN1cGVyLnVwZGF0ZUl0ZW1zKGl0ZW1zKTtcclxuICAgIF8uZWFjaCh0aGlzLml0ZW1zLCAoaXRlbSkgPT4gdGhpcy50cmFja0l0ZW0oaXRlbSkpO1xyXG4gICAgdGhpcy53YXNGaWxsZWQgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNsZWFyKCk6IHZvaWQge1xyXG4gICAgc3VwZXIuY2xlYXIoKTtcclxuICAgIHRoaXMud2FzRmlsbGVkID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdXBkYXRlKGl0ZW06IFRNb2RlbCk6IHZvaWQge1xyXG4gICAgc3VwZXIudXBkYXRlKGl0ZW0pO1xyXG4gICAgdGhpcy50cmFja0l0ZW0oaXRlbSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcHVzaChpdGVtOiBUTW9kZWwpOiB2b2lkIHtcclxuICAgIHN1cGVyLnB1c2goaXRlbSk7XHJcbiAgICB0aGlzLnRyYWNrSXRlbShpdGVtKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBpc0l0ZW1WYWxpZChpZGVudGlmaWVyOiBhbnkpOiBib29sZWFuIHtcclxuICAgIGxldCBpdGVtSW5TdG9yZSA9IG51bGw7XHJcbiAgICBmb3IoY29uc3QgaXRlbSBvZiB0aGlzLml0ZW1zKSB7XHJcbiAgICAgIGlmIChpdGVtW3RoaXMuaWRlbnRpZmllcl0gPT09IGlkZW50aWZpZXIpIHtcclxuICAgICAgICBpdGVtSW5TdG9yZSA9IGl0ZW07XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghVXRpbC5pc0RlZmluZWQoaXRlbUluU3RvcmUpKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGNvbnN0IGN1cnJlbnRUaW1lU3RhbXAgPSBVdGlsLmdldEN1cnJlbnRVbml4VGltZXN0YW1wKCk7XHJcbiAgICByZXR1cm4gKGN1cnJlbnRUaW1lU3RhbXAgLSB0aGlzLml0ZW1MaWZldGltZUluU2Vjb25kcykgPCBpdGVtSW5TdG9yZVtUaW1lc3RhbXBJdGVtU3RvcmUuSVRFTV9USU1FU1RBTVBfS0VZXTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBpc1N0b3JlVmFsaWQoKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoIXRoaXMud2FzRmlsbGVkKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChfLmlzRW1wdHkodGhpcy5pdGVtcykpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF8uYWxsKHRoaXMuaXRlbXMsIChpdGVtKSA9PiB0aGlzLmlzSXRlbVZhbGlkKGl0ZW1bdGhpcy5pZGVudGlmaWVyXSkpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB0cmFja0l0ZW0oaXRlbTogVE1vZGVsKTogdm9pZCB7XHJcbiAgICBpdGVtW1RpbWVzdGFtcEl0ZW1TdG9yZS5JVEVNX1RJTUVTVEFNUF9LRVldID0gVXRpbC5nZXRDdXJyZW50VW5peFRpbWVzdGFtcCgpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19