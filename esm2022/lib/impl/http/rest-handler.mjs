import { finalize, tap } from 'rxjs/operators';
import { Util } from "../util/util";
export class RestHandler {
    http;
    url;
    observer;
    identifier;
    constructor(http, url, observer, identifier) {
        this.http = http;
        this.url = url;
        this.observer = observer;
        this.identifier = identifier;
    }
    create(model, getParams, httpOptions) {
        this.observer.isCreatingItem = true;
        return this.http.post(Util.armUrlWithSearchParams(this.url, getParams), model, httpOptions)
            .pipe(tap((result) => {
            this.observer.onItemCreated.next(result);
        }), finalize(() => {
            this.observer.isCreatingItem = false;
        }));
    }
    destroy(id, getParams, httpOptions) {
        this.observer.isDestoyingItem = true;
        return this.http.delete(Util.armUrlWithSearchParams(Util.createEntityUrl(this.url, id), getParams), httpOptions).pipe(tap(() => {
            this.observer.onItemDestroyed.next(id);
        }), finalize(() => {
            this.observer.isDestoyingItem = false;
        }));
    }
    partialUpdate(model, getParams, httpOptions) {
        this.observer.isPartiallyUpdatingItem = true;
        return this.http.patch(Util.armUrlWithSearchParams(Util.createEntityUrl(this.url, model[this.identifier]), getParams), model, httpOptions).pipe(tap((result) => {
            this.observer.onItemPartialUpdated.next(result);
        }), finalize(() => {
            this.observer.isPartiallyUpdatingItem = false;
        }));
    }
    save(model, getParams, httpOptions) {
        this.observer.isSavingItem = true;
        let observable;
        if (Util.isDefined(model[this.identifier])) {
            observable = this.update(model, getParams, httpOptions);
        }
        else {
            observable = this.create(model, getParams, httpOptions);
        }
        return observable
            .pipe(tap((result) => {
            this.observer.onItemSaved.next(result);
        }), finalize(() => {
            this.observer.isSavingItem = false;
        }));
    }
    set(model, getParams, httpOptions) {
        this.observer.isSavingItem = true;
        let observable;
        this.observer.isUpdatingItem = true;
        observable = this.http.put(Util.armUrlWithSearchParams(this.url, getParams), model, httpOptions).pipe(tap((result) => {
            this.observer.onItemUpdated.next(result);
        }), finalize(() => {
            this.observer.isUpdatingItem = false;
        }));
        return observable
            .pipe(tap((result) => {
            this.observer.onItemSaved.next(result);
        }), finalize(() => {
            this.observer.isSavingItem = false;
        }));
    }
    update(model, getParams, httpOptions) {
        this.observer.isUpdatingItem = true;
        return this.http.put(Util.armUrlWithSearchParams(Util.createEntityUrl(this.url, model[this.identifier]), getParams), model, httpOptions).pipe(tap((result) => {
            this.observer.onItemUpdated.next(result);
        }), finalize(() => {
            this.observer.isUpdatingItem = false;
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,