import { finalize, tap } from 'rxjs/operators';
import { Util } from "../util/util";
export class ReadonlyRestHandler {
    http;
    url;
    observer;
    identifier;
    constructor(http, url, observer) {
        this.http = http;
        this.url = url;
        this.observer = observer;
    }
    all(searchParams, httpOptions) {
        this.observer.isFetchingItems = true;
        return this.http.get(Util.armUrlWithSearchParams(this.url, searchParams), httpOptions)
            .pipe(tap((result) => {
            this.observer.onItemsFetched.next(result);
        }), 
        // catchError( _.bind(this.serviceErrorHandler.catchError, this.serviceErrorHandler) as (error: any) => Observable<any> ),
        finalize(() => {
            this.observer.isFetchingItems = false;
        }));
    }
    show(id, getParams, httpOptions) {
        this.observer.isFetchingItem = true;
        return this.http.get(Util.armUrlWithSearchParams(Util.createEntityUrl(this.url, id), getParams), httpOptions)
            .pipe(tap((result) => {
            this.observer.onItemFetched.next(result);
        }), finalize(() => {
            this.observer.isFetchingItem = false;
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZG9ueS1yZXN0LWhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tcmQtY29yZS9zcmMvbGliL2ltcGwvaHR0cC9yZWFkb255LXJlc3QtaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUMsUUFBUSxFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBSTdDLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFHbEMsTUFBTSxPQUFPLG1CQUFtQjtJQUtaO0lBQ0E7SUFDQTtJQUxsQixVQUFVLENBQVM7SUFFbkIsWUFDa0IsSUFBZ0IsRUFDaEIsR0FBVyxFQUNYLFFBQXdDO1FBRnhDLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIsUUFBRyxHQUFILEdBQUcsQ0FBUTtRQUNYLGFBQVEsR0FBUixRQUFRLENBQWdDO0lBQ3ZELENBQUM7SUFFRyxHQUFHLENBQUMsWUFBcUIsRUFBRSxXQUFvQjtRQUNwRCxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFDckMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBTSxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUM7YUFDeEYsSUFBSSxDQUNILEdBQUcsQ0FBRSxDQUFDLE1BQVcsRUFBUSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QyxDQUFDLENBQUM7UUFDRiwwSEFBMEg7UUFDMUgsUUFBUSxDQUFFLEdBQVMsRUFBRTtZQUNuQixJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNOLENBQUM7SUFFTSxJQUFJLENBQUMsRUFBTyxFQUFFLFNBQWtCLEVBQUUsV0FBb0I7UUFDM0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQ2hCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsV0FBVyxDQUFDO2FBQ3pGLElBQUksQ0FDSCxHQUFHLENBQUUsQ0FBQyxNQUFTLEVBQVEsRUFBRTtZQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLEVBQ0YsUUFBUSxDQUFFLEdBQVMsRUFBRTtZQUNuQixJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNOLENBQUM7Q0FHRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7ZmluYWxpemUsIHRhcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQge0h0dHBDbGllbnR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHtJUmVhZG9ubHlSZXN0U2VydmljZX0gZnJvbSBcIi4uLy4uL2ludGVyZmFjZS9odHRwL2ktcmVhZG9ubHktcmVzdHNlcnZpY2VcIjtcclxuaW1wb3J0IHtSZWFkb25seVJlc3RTZXJ2aWNlT2JzZXJ2ZXJ9IGZyb20gXCIuL3JlYWRvbmx5LXJlc3Qtc2VydmljZS1vYnNlcnZlclwiO1xyXG5pbXBvcnQge1V0aWx9IGZyb20gXCIuLi91dGlsL3V0aWxcIjtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgUmVhZG9ubHlSZXN0SGFuZGxlcjxUPiBpbXBsZW1lbnRzIElSZWFkb25seVJlc3RTZXJ2aWNlPFQ+IHtcclxuXHJcbiAgaWRlbnRpZmllcjogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyByZWFkb25seSBodHRwOiBIdHRwQ2xpZW50LFxyXG4gICAgcHVibGljIHJlYWRvbmx5IHVybDogc3RyaW5nLFxyXG4gICAgcHVibGljIHJlYWRvbmx5IG9ic2VydmVyOiBSZWFkb25seVJlc3RTZXJ2aWNlT2JzZXJ2ZXI8VD5cclxuICApIHt9XHJcblxyXG4gIHB1YmxpYyBhbGwoc2VhcmNoUGFyYW1zPzogb2JqZWN0LCBodHRwT3B0aW9ucz86IG9iamVjdCk6IE9ic2VydmFibGU8VFtdPiB7XHJcbiAgICB0aGlzLm9ic2VydmVyLmlzRmV0Y2hpbmdJdGVtcyA9IHRydWU7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxUW10+KFV0aWwuYXJtVXJsV2l0aFNlYXJjaFBhcmFtcyh0aGlzLnVybCwgc2VhcmNoUGFyYW1zKSwgaHR0cE9wdGlvbnMpXHJcbiAgICAgIC5waXBlKFxyXG4gICAgICAgIHRhcCggKHJlc3VsdDogVFtdKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICB0aGlzLm9ic2VydmVyLm9uSXRlbXNGZXRjaGVkLm5leHQocmVzdWx0KTtcclxuICAgICAgICB9KSxcclxuICAgICAgICAvLyBjYXRjaEVycm9yKCBfLmJpbmQodGhpcy5zZXJ2aWNlRXJyb3JIYW5kbGVyLmNhdGNoRXJyb3IsIHRoaXMuc2VydmljZUVycm9ySGFuZGxlcikgYXMgKGVycm9yOiBhbnkpID0+IE9ic2VydmFibGU8YW55PiApLFxyXG4gICAgICAgIGZpbmFsaXplKCAoKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICB0aGlzLm9ic2VydmVyLmlzRmV0Y2hpbmdJdGVtcyA9IGZhbHNlO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2hvdyhpZDogYW55LCBnZXRQYXJhbXM/OiBvYmplY3QsIGh0dHBPcHRpb25zPzogb2JqZWN0KTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgICB0aGlzLm9ic2VydmVyLmlzRmV0Y2hpbmdJdGVtID0gdHJ1ZTtcclxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PFQ+KFxyXG4gICAgICAgIFV0aWwuYXJtVXJsV2l0aFNlYXJjaFBhcmFtcyhVdGlsLmNyZWF0ZUVudGl0eVVybCh0aGlzLnVybCwgaWQpLCBnZXRQYXJhbXMpLCBodHRwT3B0aW9ucylcclxuICAgICAgLnBpcGUoXHJcbiAgICAgICAgdGFwKCAocmVzdWx0OiBUKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICB0aGlzLm9ic2VydmVyLm9uSXRlbUZldGNoZWQubmV4dChyZXN1bHQpO1xyXG4gICAgICAgIH0pLFxyXG4gICAgICAgIGZpbmFsaXplKCAoKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICB0aGlzLm9ic2VydmVyLmlzRmV0Y2hpbmdJdGVtID0gZmFsc2U7XHJcbiAgICAgICAgfSlcclxuICAgICAgKTtcclxuICB9XHJcblxyXG5cclxufVxyXG4iXX0=