import { BaseObject } from "../ui/base-object";
import { ReadonlyRestServiceObserver } from "../../impl/http/readonly-rest-service-observer";
import { ReadonlyRestHandler } from "../../impl/http/readony-rest-handler";
import { tap } from 'rxjs/operators';
import { Util } from "../../impl/util/util";
export class AbstractStoredReadonlyRestservice extends BaseObject {
    observer;
    constructor(restServiceObserver) {
        super();
        this.observer = Util.isDefined(restServiceObserver) ? restServiceObserver :
            new ReadonlyRestServiceObserver();
    }
    all(searchParams, httpOptions) {
        return new ReadonlyRestHandler(this.http, this.url, this.observer).all(searchParams, httpOptions)
            .pipe(tap((response) => {
            this.store.updateItems(response);
        }));
    }
    show(id, getParams, httpOptions) {
        return new ReadonlyRestHandler(this.http, this.url, this.observer).show(id, getParams, httpOptions)
            .pipe(tap((response) => {
            this.store.update(response);
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3Qtc3RvcmVkLXJlYWRvbmx5LXJlc3RzZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbXJkLWNvcmUvc3JjL2xpYi9hYnN0cmFjdC9odHRwL2Fic3RyYWN0LXN0b3JlZC1yZWFkb25seS1yZXN0c2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFHN0MsT0FBTyxFQUFDLDJCQUEyQixFQUFDLE1BQU0sZ0RBQWdELENBQUM7QUFHM0YsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sc0NBQXNDLENBQUM7QUFDekUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUUxQyxNQUFNLE9BQWdCLGlDQUEwQyxTQUFRLFVBQVU7SUFRaEUsUUFBUSxDQUFzQztJQUU5RCxZQUNFLG1CQUF5RDtRQUV6RCxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQ3pFLElBQUksMkJBQTJCLEVBQVUsQ0FBQztJQUM5QyxDQUFDO0lBRU0sR0FBRyxDQUFDLFlBQXFCLEVBQUUsV0FBb0I7UUFDcEQsT0FBTyxJQUFJLG1CQUFtQixDQUFTLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxXQUFXLENBQUM7YUFDdEcsSUFBSSxDQUNILEdBQUcsQ0FBRSxDQUFDLFFBQWtCLEVBQUUsRUFBRTtZQUMxQixJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ04sQ0FBQztJQUVNLElBQUksQ0FBQyxFQUFPLEVBQUUsU0FBa0IsRUFBRSxXQUFvQjtRQUMzRCxPQUFPLElBQUksbUJBQW1CLENBQVMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLFNBQVMsRUFBRSxXQUFXLENBQUM7YUFDeEcsSUFBSSxDQUNILEdBQUcsQ0FBRSxDQUFDLFFBQWdCLEVBQUUsRUFBRTtZQUN4QixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ04sQ0FBQztDQUdGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtCYXNlT2JqZWN0fSBmcm9tIFwiLi4vdWkvYmFzZS1vYmplY3RcIjtcclxuaW1wb3J0IHtJUmVhZG9ubHlTdG9yZVJlc3RTZXJ2aWNlfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlL2h0dHAvaS1yZWFkb25seS1zdG9yZWQtcmVzdC1zZXJ2aWNlXCI7XHJcbmltcG9ydCB7SXRlbVN0b3JlfSBmcm9tIFwiLi4vLi4vaW1wbC91dGlsL2l0ZW0tc3RvcmVcIjtcclxuaW1wb3J0IHtSZWFkb25seVJlc3RTZXJ2aWNlT2JzZXJ2ZXJ9IGZyb20gXCIuLi8uLi9pbXBsL2h0dHAvcmVhZG9ubHktcmVzdC1zZXJ2aWNlLW9ic2VydmVyXCI7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHtSZWFkb25seVJlc3RIYW5kbGVyfSBmcm9tIFwiLi4vLi4vaW1wbC9odHRwL3JlYWRvbnktcmVzdC1oYW5kbGVyXCI7XHJcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHtVdGlsfSBmcm9tIFwiLi4vLi4vaW1wbC91dGlsL3V0aWxcIjtcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdFN0b3JlZFJlYWRvbmx5UmVzdHNlcnZpY2U8VE1vZGVsPiBleHRlbmRzIEJhc2VPYmplY3RcclxuICBpbXBsZW1lbnRzIElSZWFkb25seVN0b3JlUmVzdFNlcnZpY2U8VE1vZGVsPiB7XHJcblxyXG4gIHB1YmxpYyBhYnN0cmFjdCB1cmw6IHN0cmluZztcclxuICBwdWJsaWMgYWJzdHJhY3Qgc3RvcmU6IEl0ZW1TdG9yZTxUTW9kZWw+O1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBpZGVudGlmaWVyOiBzdHJpbmc7XHJcbiAgcHJvdGVjdGVkIGFic3RyYWN0IGh0dHA6IEh0dHBDbGllbnQ7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBvYnNlcnZlcjogUmVhZG9ubHlSZXN0U2VydmljZU9ic2VydmVyPFRNb2RlbD47XHJcblxyXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihcclxuICAgIHJlc3RTZXJ2aWNlT2JzZXJ2ZXI/OiBSZWFkb25seVJlc3RTZXJ2aWNlT2JzZXJ2ZXI8VE1vZGVsPlxyXG4gICkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMub2JzZXJ2ZXIgPSBVdGlsLmlzRGVmaW5lZChyZXN0U2VydmljZU9ic2VydmVyKSA/IHJlc3RTZXJ2aWNlT2JzZXJ2ZXIgOlxyXG4gICAgICBuZXcgUmVhZG9ubHlSZXN0U2VydmljZU9ic2VydmVyPFRNb2RlbD4oKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhbGwoc2VhcmNoUGFyYW1zPzogb2JqZWN0LCBodHRwT3B0aW9ucz86IG9iamVjdCk6IE9ic2VydmFibGU8VE1vZGVsW10+IHtcclxuICAgIHJldHVybiBuZXcgUmVhZG9ubHlSZXN0SGFuZGxlcjxUTW9kZWw+KHRoaXMuaHR0cCwgdGhpcy51cmwsIHRoaXMub2JzZXJ2ZXIpLmFsbChzZWFyY2hQYXJhbXMsIGh0dHBPcHRpb25zKVxyXG4gICAgICAucGlwZShcclxuICAgICAgICB0YXAoIChyZXNwb25zZTogVE1vZGVsW10pID0+IHtcclxuICAgICAgICAgIHRoaXMuc3RvcmUudXBkYXRlSXRlbXMocmVzcG9uc2UpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2hvdyhpZDogYW55LCBnZXRQYXJhbXM/OiBvYmplY3QsIGh0dHBPcHRpb25zPzogb2JqZWN0KTogT2JzZXJ2YWJsZTxUTW9kZWw+IHtcclxuICAgIHJldHVybiBuZXcgUmVhZG9ubHlSZXN0SGFuZGxlcjxUTW9kZWw+KHRoaXMuaHR0cCwgdGhpcy51cmwsIHRoaXMub2JzZXJ2ZXIpLnNob3coaWQsIGdldFBhcmFtcywgaHR0cE9wdGlvbnMpXHJcbiAgICAgIC5waXBlKFxyXG4gICAgICAgIHRhcCggKHJlc3BvbnNlOiBUTW9kZWwpID0+IHtcclxuICAgICAgICAgIHRoaXMuc3RvcmUudXBkYXRlKHJlc3BvbnNlKTtcclxuICAgICAgICB9KVxyXG4gICAgICApO1xyXG4gIH1cclxuXHJcblxyXG59XHJcbiJdfQ==