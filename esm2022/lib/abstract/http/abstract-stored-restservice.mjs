import { AbstractStoredReadonlyRestservice } from "./abstract-stored-readonly-restservice";
import { RestServiceObserver } from "../../impl/http/rest-service-observer";
import { RestHandler } from "../../impl/http/rest-handler";
import { tap } from 'rxjs/operators';
import { Util } from "../../impl/util/util";
export class AbstractStoredRestservice extends AbstractStoredReadonlyRestservice {
    constructor() {
        super(new RestServiceObserver());
    }
    create(model, getParams, httpOptions) {
        let request = new RestHandler(this.http, this.url, this.observer, this.identifier)
            .create(model, getParams, httpOptions);
        return this.modifyCreateCall(request);
    }
    destroy(id, getParams, httpOptions) {
        return new RestHandler(this.http, this.url, this.observer, this.identifier)
            .destroy(id, getParams, httpOptions)
            .pipe(tap(() => {
            this.store.removeByIdentifier(id);
        }));
    }
    partialUpdate(model, getParams, httpOptions) {
        return new RestHandler(this.http, this.url, this.observer, this.identifier)
            .partialUpdate(model, getParams, httpOptions)
            .pipe(tap((result) => {
            this.store.update(result);
        }));
    }
    save(model, getParams, httpOptions) {
        let request = new RestHandler(this.http, this.url, this.observer, this.identifier)
            .save(model, getParams, httpOptions);
        if (Util.isDefined(model[this.identifier])) {
            request = this.modifyUpdateCall(request);
        }
        else {
            request = this.modifyCreateCall(request);
        }
        return request;
    }
    set(model, getParams, httpOptions) {
        let request = new RestHandler(this.http, this.url, this.observer, this.identifier)
            .set(model, getParams, httpOptions);
        if (Util.isDefined(model[this.identifier])) {
            request = this.modifyUpdateCall(request);
        }
        else {
            request = this.modifyCreateCall(request);
        }
        return request;
    }
    update(model, getParams, httpOptions) {
        let request = new RestHandler(this.http, this.url, this.observer, this.identifier)
            .update(model, getParams, httpOptions);
        request = this.modifyUpdateCall(request);
        return request;
    }
    modifyCreateCall(observable) {
        return observable.pipe(tap((result) => {
            this.store.push(result);
        }));
    }
    modifyUpdateCall(observable) {
        return observable.pipe(tap((result) => {
            this.store.update(result);
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,