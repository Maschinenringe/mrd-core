import { Observable, forkJoin } from 'rxjs';
import * as _ from 'underscore';
import { Util } from "../../impl/util/util";
import { SubscriptionManager } from "../../impl/util/subscription-manager";
import { SubscriptionHandler } from "../../impl/util/subscription-handler";
export class AbstractActivationQueuedGuard {
    queue = [];
    route;
    state;
    canActivate(route, state) {
        this.route = route;
        this.state = state;
        return new Observable((subscriber) => {
            this.runQueueRecursive(0, subscriber);
        });
    }
    sequence(step) {
        if (_.isArray(step)) {
            this.queue.push(step);
        }
        else {
            this.queue.push([step]);
        }
        return this;
    }
    runQueueRecursive(level, subscriber) {
        const currentQueueItems = this.queue[level];
        if (!Util.isDefined(currentQueueItems)) {
            subscriber.next(true);
            subscriber.complete();
            return;
        }
        const activators = _.map(currentQueueItems, (queueItem) => {
            return queueItem.canActivate(this.route, this.state);
        });
        SubscriptionManager.subscribe(forkJoin(activators), new SubscriptionHandler((canActivateStates) => {
            if (!_.all(canActivateStates)) {
                subscriber.next(false);
                subscriber.complete();
            }
            else {
                this.runQueueRecursive(level + 1, subscriber);
            }
        }, () => {
            subscriber.next(false);
            subscriber.complete();
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtYWN0aXZhdGlvbi1xdWV1ZWQtZ3VhcmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tcmQtY29yZS9zcmMvbGliL2Fic3RyYWN0L3JvdXRpbmcvYWJzdHJhY3QtYWN0aXZhdGlvbi1xdWV1ZWQtZ3VhcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBYyxRQUFRLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDeEQsT0FBTyxLQUFLLENBQUMsTUFBTSxZQUFZLENBQUM7QUFDaEMsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQzFDLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHNDQUFzQyxDQUFDO0FBQ3pFLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHNDQUFzQyxDQUFDO0FBRXpFLE1BQU0sT0FBZ0IsNkJBQTZCO0lBRWhDLEtBQUssR0FBb0IsRUFBRSxDQUFDO0lBRXJDLEtBQUssQ0FBeUI7SUFDOUIsS0FBSyxDQUFzQjtJQUU1QixXQUFXLENBQ2hCLEtBQTZCLEVBQzdCLEtBQTBCO1FBRTFCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLE9BQU8sSUFBSSxVQUFVLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUNuQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVTLFFBQVEsQ0FBQyxJQUFpQztRQUNsRCxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBcUIsQ0FBQyxDQUFDO1NBQ3hDO2FBQU07WUFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQW1CLENBQUMsQ0FBQyxDQUFDO1NBQ3hDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU8saUJBQWlCLENBQUMsS0FBYSxFQUFFLFVBQXlDO1FBQ2hGLE1BQU0saUJBQWlCLEdBQWtCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsRUFBRTtZQUN0QyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3RCLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN0QixPQUFPO1NBQ1I7UUFDRCxNQUFNLFVBQVUsR0FBa0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLFNBQXNCLEVBQUUsRUFBRTtZQUNwRixPQUFPLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkQsQ0FBQyxDQUFDLENBQUM7UUFDSCxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFLElBQUksbUJBQW1CLENBQ3pFLENBQUMsaUJBQTRCLEVBQUUsRUFBRTtZQUMvQixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO2dCQUM3QixVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN2QixVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDdkI7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7YUFDL0M7UUFDSCxDQUFDLEVBQ0QsR0FBRyxFQUFFO1lBQ0gsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN2QixVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDeEIsQ0FBQyxDQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FFRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhbkFjdGl2YXRlLCBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBSb3V0ZXJTdGF0ZVNuYXBzaG90LCBVcmxUcmVlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaWJlciwgZm9ya0pvaW4gfSBmcm9tICdyeGpzJztcclxuaW1wb3J0ICogYXMgXyBmcm9tICd1bmRlcnNjb3JlJztcclxuaW1wb3J0IHtVdGlsfSBmcm9tIFwiLi4vLi4vaW1wbC91dGlsL3V0aWxcIjtcclxuaW1wb3J0IHtTdWJzY3JpcHRpb25NYW5hZ2VyfSBmcm9tIFwiLi4vLi4vaW1wbC91dGlsL3N1YnNjcmlwdGlvbi1tYW5hZ2VyXCI7XHJcbmltcG9ydCB7U3Vic2NyaXB0aW9uSGFuZGxlcn0gZnJvbSBcIi4uLy4uL2ltcGwvdXRpbC9zdWJzY3JpcHRpb24taGFuZGxlclwiO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0QWN0aXZhdGlvblF1ZXVlZEd1YXJkIGltcGxlbWVudHMgQ2FuQWN0aXZhdGUge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IHF1ZXVlOiBDYW5BY3RpdmF0ZVtdW10gPSBbXTtcclxuXHJcbiAgcHJpdmF0ZSByb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdDtcclxuICBwcml2YXRlIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90O1xyXG5cclxuICBwdWJsaWMgY2FuQWN0aXZhdGUoXHJcbiAgICByb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCxcclxuICAgIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90XHJcbiAgKTogT2JzZXJ2YWJsZTxib29sZWFuIHwgVXJsVHJlZT4gfCBQcm9taXNlPGJvb2xlYW4gfCBVcmxUcmVlPiB8IGJvb2xlYW4gfCBVcmxUcmVlIHtcclxuICAgIHRoaXMucm91dGUgPSByb3V0ZTtcclxuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZSgoc3Vic2NyaWJlcikgPT4ge1xyXG4gICAgICB0aGlzLnJ1blF1ZXVlUmVjdXJzaXZlKDAsIHN1YnNjcmliZXIpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgc2VxdWVuY2Uoc3RlcDogQ2FuQWN0aXZhdGVbXSB8IENhbkFjdGl2YXRlKTogQWJzdHJhY3RBY3RpdmF0aW9uUXVldWVkR3VhcmQge1xyXG4gICAgaWYgKF8uaXNBcnJheShzdGVwKSkge1xyXG4gICAgICB0aGlzLnF1ZXVlLnB1c2goc3RlcCBhcyBDYW5BY3RpdmF0ZVtdKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucXVldWUucHVzaChbc3RlcCBhcyBDYW5BY3RpdmF0ZV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJ1blF1ZXVlUmVjdXJzaXZlKGxldmVsOiBudW1iZXIsIHN1YnNjcmliZXI6IFN1YnNjcmliZXI8Ym9vbGVhbiB8IFVybFRyZWU+KTogdm9pZCB7XHJcbiAgICBjb25zdCBjdXJyZW50UXVldWVJdGVtczogQ2FuQWN0aXZhdGVbXSA9IHRoaXMucXVldWVbbGV2ZWxdO1xyXG4gICAgaWYgKCFVdGlsLmlzRGVmaW5lZChjdXJyZW50UXVldWVJdGVtcykpIHtcclxuICAgICAgc3Vic2NyaWJlci5uZXh0KHRydWUpO1xyXG4gICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGFjdGl2YXRvcnM6IENhbkFjdGl2YXRlW10gPSBfLm1hcChjdXJyZW50UXVldWVJdGVtcywgKHF1ZXVlSXRlbTogQ2FuQWN0aXZhdGUpID0+IHtcclxuICAgICAgcmV0dXJuIHF1ZXVlSXRlbS5jYW5BY3RpdmF0ZSh0aGlzLnJvdXRlLCB0aGlzLnN0YXRlKTtcclxuICAgIH0pO1xyXG4gICAgU3Vic2NyaXB0aW9uTWFuYWdlci5zdWJzY3JpYmUoZm9ya0pvaW4oYWN0aXZhdG9ycyksIG5ldyBTdWJzY3JpcHRpb25IYW5kbGVyKFxyXG4gICAgICAoY2FuQWN0aXZhdGVTdGF0ZXM6IGJvb2xlYW5bXSkgPT4ge1xyXG4gICAgICAgIGlmICghXy5hbGwoY2FuQWN0aXZhdGVTdGF0ZXMpKSB7XHJcbiAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoZmFsc2UpO1xyXG4gICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLnJ1blF1ZXVlUmVjdXJzaXZlKGxldmVsICsgMSwgc3Vic2NyaWJlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICAoKSA9PiB7XHJcbiAgICAgICAgc3Vic2NyaWJlci5uZXh0KGZhbHNlKTtcclxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgIH1cclxuICAgICkpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19