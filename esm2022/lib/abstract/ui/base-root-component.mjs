import { Directive } from '@angular/core';
import { SubscriptionHandler } from "../../impl/util/subscription-handler";
import * as _ from 'underscore';
import { BasePushStrategyObject } from "./base-push-strategy-object";
import * as i0 from "@angular/core";
export class BaseRootComponent extends BasePushStrategyObject {
    observables = [];
    listenTo(observable, resolver) {
        this.observables.push(observable);
        observable.isVisible.value = true;
        this.watch(observable.nextRequested, new SubscriptionHandler((dataSet) => {
            this.onNextRequested(observable, dataSet, resolver);
        }));
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        _.each(this.observables, (observable) => observable.isVisible.value = false);
    }
    onNextRequested(observable, dataSet, resolver) {
        this.subscribe(this.canDeactivate(), new SubscriptionHandler((canDeactivate) => {
            if (canDeactivate) {
                // Maybe catch error
                resolver.resolve(this.activatedRoute, dataSet, observable);
            }
        }));
    }
    /** @nocollapse */ static ɵfac = /** @pureOrBreakMyCode */ function () { let ɵBaseRootComponent_BaseFactory; return function BaseRootComponent_Factory(t) { return (ɵBaseRootComponent_BaseFactory || (ɵBaseRootComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BaseRootComponent)))(t || BaseRootComponent); }; }();
    /** @nocollapse */ static ɵdir = /** @pureOrBreakMyCode */ i0.ɵɵdefineDirective({ type: BaseRootComponent, features: [i0.ɵɵInheritDefinitionFeature] });
}
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(BaseRootComponent, [{
        type: Directive
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1yb290LWNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL21yZC1jb3JlL3NyYy9saWIvYWJzdHJhY3QvdWkvYmFzZS1yb290LWNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsU0FBUyxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBRXJELE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHNDQUFzQyxDQUFDO0FBQ3pFLE9BQU8sS0FBSyxDQUFDLE1BQU0sWUFBWSxDQUFDO0FBR2hDLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLDZCQUE2QixDQUFDOztBQUduRSxNQUFNLE9BQWdCLGlCQUFrQixTQUFRLHNCQUFzQjtJQUkxRCxXQUFXLEdBQTJCLEVBQUUsQ0FBQztJQUU1QyxRQUFRLENBQUMsVUFBZ0MsRUFBRSxRQUEwQztRQUMxRixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNsQyxVQUFVLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLElBQUksbUJBQW1CLENBQUMsQ0FBQyxPQUFZLEVBQUUsRUFBRTtZQUM1RSxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDdEQsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNOLENBQUM7SUFFTSxXQUFXO1FBQ2hCLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNwQixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxVQUFnQyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQztJQUNyRyxDQUFDO0lBRVMsZUFBZSxDQUN2QixVQUFnQyxFQUNoQyxPQUFZLEVBQ1osUUFBMEM7UUFFMUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUUsSUFBSSxtQkFBbUIsQ0FBQyxDQUFDLGFBQXNCLEVBQUUsRUFBRTtZQUN0RixJQUFJLGFBQWEsRUFBRTtnQkFDakIsb0JBQW9CO2dCQUNwQixRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO2FBQzVEO1FBQ0gsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNOLENBQUM7cVFBOUJtQixpQkFBaUIsU0FBakIsaUJBQWlCOzRGQUFqQixpQkFBaUI7O3VGQUFqQixpQkFBaUI7Y0FEdEMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SURlYWN0aXZhdGV9IGZyb20gXCIuLi8uLi9pbnRlcmZhY2UvdXRpbC9pLWRlYWN0aXZhdGVcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBEaXJlY3RpdmUsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0lFbnRpdHlTZWxlY3Rvcn0gZnJvbSBcIi4uLy4uL2ludGVyZmFjZS91aS9pLWVudGl0eS1zZWxlY3RvclwiO1xyXG5pbXBvcnQge1N1YnNjcmlwdGlvbkhhbmRsZXJ9IGZyb20gXCIuLi8uLi9pbXBsL3V0aWwvc3Vic2NyaXB0aW9uLWhhbmRsZXJcIjtcclxuaW1wb3J0ICogYXMgXyBmcm9tICd1bmRlcnNjb3JlJztcclxuaW1wb3J0IHtBYnN0cmFjdEVudGl0eVJlc29sdmVyfSBmcm9tIFwiLi4vdXRpbC9hYnN0cmFjdC1lbnRpdHktcmVzb2x2ZXJcIjtcclxuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQge0Jhc2VQdXNoU3RyYXRlZ3lPYmplY3R9IGZyb20gXCIuL2Jhc2UtcHVzaC1zdHJhdGVneS1vYmplY3RcIjtcclxuXHJcbkBEaXJlY3RpdmUoKVxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZVJvb3RDb21wb25lbnQgZXh0ZW5kcyBCYXNlUHVzaFN0cmF0ZWd5T2JqZWN0IGltcGxlbWVudHMgSURlYWN0aXZhdGUsIE9uRGVzdHJveSB7XHJcblxyXG4gIHB1YmxpYyBhYnN0cmFjdCBjYW5EZWFjdGl2YXRlKCk6IE9ic2VydmFibGU8Ym9vbGVhbj47XHJcbiAgcHJvdGVjdGVkIGFic3RyYWN0IGFjdGl2YXRlZFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZTtcclxuICBwcm90ZWN0ZWQgb2JzZXJ2YWJsZXM6IElFbnRpdHlTZWxlY3Rvcjxhbnk+W10gPSBbXTtcclxuXHJcbiAgcHVibGljIGxpc3RlblRvKG9ic2VydmFibGU6IElFbnRpdHlTZWxlY3Rvcjxhbnk+LCByZXNvbHZlcjogQWJzdHJhY3RFbnRpdHlSZXNvbHZlcjxhbnksIGFueT4pOiB2b2lkIHtcclxuICAgIHRoaXMub2JzZXJ2YWJsZXMucHVzaChvYnNlcnZhYmxlKTtcclxuICAgIG9ic2VydmFibGUuaXNWaXNpYmxlLnZhbHVlID0gdHJ1ZTtcclxuICAgIHRoaXMud2F0Y2gob2JzZXJ2YWJsZS5uZXh0UmVxdWVzdGVkLCBuZXcgU3Vic2NyaXB0aW9uSGFuZGxlcigoZGF0YVNldDogYW55KSA9PiB7XHJcbiAgICAgIHRoaXMub25OZXh0UmVxdWVzdGVkKG9ic2VydmFibGUsIGRhdGFTZXQsIHJlc29sdmVyKTtcclxuICAgIH0pKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgIHN1cGVyLm5nT25EZXN0cm95KCk7XHJcbiAgICBfLmVhY2godGhpcy5vYnNlcnZhYmxlcywgKG9ic2VydmFibGU6IElFbnRpdHlTZWxlY3Rvcjxhbnk+KSA9PiBvYnNlcnZhYmxlLmlzVmlzaWJsZS52YWx1ZSA9IGZhbHNlKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBvbk5leHRSZXF1ZXN0ZWQoXHJcbiAgICBvYnNlcnZhYmxlOiBJRW50aXR5U2VsZWN0b3I8YW55PixcclxuICAgIGRhdGFTZXQ6IGFueSxcclxuICAgIHJlc29sdmVyOiBBYnN0cmFjdEVudGl0eVJlc29sdmVyPGFueSwgYW55PlxyXG4gICk6IHZvaWQge1xyXG4gICAgdGhpcy5zdWJzY3JpYmUodGhpcy5jYW5EZWFjdGl2YXRlKCksIG5ldyBTdWJzY3JpcHRpb25IYW5kbGVyKChjYW5EZWFjdGl2YXRlOiBib29sZWFuKSA9PiB7XHJcbiAgICAgIGlmIChjYW5EZWFjdGl2YXRlKSB7XHJcbiAgICAgICAgLy8gTWF5YmUgY2F0Y2ggZXJyb3JcclxuICAgICAgICByZXNvbHZlci5yZXNvbHZlKHRoaXMuYWN0aXZhdGVkUm91dGUsIGRhdGFTZXQsIG9ic2VydmFibGUpO1xyXG4gICAgICB9XHJcbiAgICB9KSk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=