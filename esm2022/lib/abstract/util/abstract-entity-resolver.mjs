import * as _ from 'underscore';
export class AbstractEntityResolver {
    router;
    routeConfiguration;
    configuration;
    constructor(router, routeConfiguration, configuration) {
        this.router = router;
        this.routeConfiguration = routeConfiguration;
        this.configuration = configuration;
        this.configuration = configuration || AbstractEntityResolver.generateDefaultConfiguration();
    }
    runResolver(activatedRoute, params) {
        const currentRouteParams = _.extend(_.clone(activatedRoute.snapshot.params), params);
        if (this.configuration.keepQueryParams) {
            return this.router.navigate(this.routeConfiguration.buildNavigation(currentRouteParams), { queryParams: activatedRoute.snapshot.queryParams });
        }
        else {
            return this.router.navigate(this.routeConfiguration.buildNavigation(currentRouteParams));
        }
    }
    static generateDefaultConfiguration() {
        return {
            keepQueryParams: false
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtZW50aXR5LXJlc29sdmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbXJkLWNvcmUvc3JjL2xpYi9hYnN0cmFjdC91dGlsL2Fic3RyYWN0LWVudGl0eS1yZXNvbHZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEtBQUssQ0FBQyxNQUFNLFlBQVksQ0FBQztBQU9oQyxNQUFNLE9BQWdCLHNCQUFzQjtJQVNyQjtJQUNBO0lBQ0E7SUFIckIsWUFDcUIsTUFBYyxFQUNkLGtCQUE0RCxFQUM1RCxhQUE0QztRQUY1QyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUEwQztRQUM1RCxrQkFBYSxHQUFiLGFBQWEsQ0FBK0I7UUFFL0QsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLElBQUksc0JBQXNCLENBQUMsNEJBQTRCLEVBQUUsQ0FBQztJQUM5RixDQUFDO0lBRVMsV0FBVyxDQUFDLGNBQThCLEVBQUUsTUFBYztRQUNsRSxNQUFNLGtCQUFrQixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3JGLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLEVBQUU7WUFDdEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FDekIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxFQUMzRCxFQUFDLFdBQVcsRUFBRSxjQUFjLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBQyxDQUNuRCxDQUFDO1NBQ0g7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUE7U0FDekY7SUFDSCxDQUFDO0lBRU8sTUFBTSxDQUFDLDRCQUE0QjtRQUN6QyxPQUFPO1lBQ0wsZUFBZSxFQUFFLEtBQUs7U0FDdkIsQ0FBQztJQUNKLENBQUM7Q0FFRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWJzdHJhY3RSb3V0ZUNvbmZpZ3VyYXRpb259IGZyb20gXCIuLi9yb3V0aW5nL2Fic3RyYWN0LXJvdXRlLWNvbmZpZ3VyYXRpb25cIjtcclxuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCAqIGFzIF8gZnJvbSAndW5kZXJzY29yZSc7XHJcbmltcG9ydCB7SUVudGl0eVNlbGVjdG9yfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlL3VpL2ktZW50aXR5LXNlbGVjdG9yXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElFbnRpdHlSZXNvbHZlckNvbmZpZ3VyYXRpb24ge1xyXG4gIGtlZXBRdWVyeVBhcmFtczogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0RW50aXR5UmVzb2x2ZXI8VFJvdXRlUGFyYW1zLCBUTW9kZWw+IHtcclxuXHJcbiAgcHVibGljIGFic3RyYWN0IHJlc29sdmUoXHJcbiAgICBhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUsXHJcbiAgICBtb2RlbDogVE1vZGVsLFxyXG4gICAgZW50aXR5U2VsZWN0b3I6IElFbnRpdHlTZWxlY3RvcjxUTW9kZWw+XHJcbiAgKTogUHJvbWlzZTxib29sZWFuPjtcclxuXHJcbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHJvdXRlcjogUm91dGVyLFxyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHJvdXRlQ29uZmlndXJhdGlvbjogQWJzdHJhY3RSb3V0ZUNvbmZpZ3VyYXRpb248VFJvdXRlUGFyYW1zPixcclxuICAgIHByb3RlY3RlZCByZWFkb25seSBjb25maWd1cmF0aW9uPzogSUVudGl0eVJlc29sdmVyQ29uZmlndXJhdGlvbixcclxuICApIHtcclxuICAgIHRoaXMuY29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyYXRpb24gfHwgQWJzdHJhY3RFbnRpdHlSZXNvbHZlci5nZW5lcmF0ZURlZmF1bHRDb25maWd1cmF0aW9uKCk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgcnVuUmVzb2x2ZXIoYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlLCBwYXJhbXM6IG9iamVjdCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgY29uc3QgY3VycmVudFJvdXRlUGFyYW1zID0gXy5leHRlbmQoXy5jbG9uZShhY3RpdmF0ZWRSb3V0ZS5zbmFwc2hvdC5wYXJhbXMpLCBwYXJhbXMpO1xyXG4gICAgaWYgKHRoaXMuY29uZmlndXJhdGlvbi5rZWVwUXVlcnlQYXJhbXMpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucm91dGVyLm5hdmlnYXRlKFxyXG4gICAgICAgIHRoaXMucm91dGVDb25maWd1cmF0aW9uLmJ1aWxkTmF2aWdhdGlvbihjdXJyZW50Um91dGVQYXJhbXMpLFxyXG4gICAgICAgIHtxdWVyeVBhcmFtczogYWN0aXZhdGVkUm91dGUuc25hcHNob3QucXVlcnlQYXJhbXN9XHJcbiAgICAgICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gdGhpcy5yb3V0ZXIubmF2aWdhdGUodGhpcy5yb3V0ZUNvbmZpZ3VyYXRpb24uYnVpbGROYXZpZ2F0aW9uKGN1cnJlbnRSb3V0ZVBhcmFtcykpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBnZW5lcmF0ZURlZmF1bHRDb25maWd1cmF0aW9uKCk6IElFbnRpdHlSZXNvbHZlckNvbmZpZ3VyYXRpb24ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAga2VlcFF1ZXJ5UGFyYW1zOiBmYWxzZVxyXG4gICAgfTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==