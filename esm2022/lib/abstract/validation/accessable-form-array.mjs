import { FormArray } from '@angular/forms';
import * as _ from 'underscore';
import { Util } from '../../impl/util/util';
import { ValidatorRequired } from '../../impl/validation/validator-required';
export const Type = Function;
export class AccessableFormArray {
    validators$ = [];
    control;
    type;
    required$ = false;
    entries$;
    initialize(type) {
        this.control = new FormArray([]);
        this.type = type;
        this.entries$ = [];
    }
    push(entry) {
        const item = this.generateFormEntry(entry);
        this.control.push(item.control);
        this.entries$.push(item);
        return item;
    }
    removeAt(index) {
        this.control.removeAt(index);
        this.entries$ = _.reject(this.entries$, (e, round) => {
            return round === index;
        });
        let markAsUsed = false;
        for (const entry of this.entries$) {
            markAsUsed = markAsUsed || entry.dirty;
        }
        markAsUsed ? this.markAsUsed() : this.markAsUnused();
    }
    validateWith(validators) {
        if (!Util.isDefined(validators)) {
            validators = [];
        }
        if (_.isArray(validators)) {
            this.validators$ = validators;
        }
        this.control.setValidators(_.map(validators, (v) => v.validator()));
        this.required$ = false;
        _.each(this.validators$, (v) => {
            if (v instanceof ValidatorRequired) {
                this.required$ = true;
            }
        });
        this.control.updateValueAndValidity();
        return this;
    }
    clearValidators() {
        this.validators$ = [];
    }
    generateFormEntry(value) {
        const validation = new this.type();
        validation.reset(value);
        return validation;
    }
    get errors() {
        return _.compact(_.map(this.validators$, (e) => {
            if (e.hasError) {
                return e.error;
            }
            return null;
        }));
    }
    get error() {
        return _.find(this.validators$, (v) => {
            return v.hasError;
        });
    }
    get validators() {
        return this.validators$;
    }
    get required() {
        return this.required$;
    }
    get dirty() {
        return this.control.dirty;
    }
    get touched() {
        return this.control.touched;
    }
    get valid() {
        return this.control.valid;
    }
    get value() {
        const ret = [];
        for (const entry of this.entries$) {
            ret.push(entry.value);
        }
        return ret;
    }
    get entries() {
        return this.entries$;
    }
    disable() {
        this.control.disable();
        return this;
    }
    enable() {
        this.control.enable();
        for (const entry of this.entries$) {
            entry.enable();
        }
        return this;
    }
    markAsDirty() {
        this.control.markAsDirty();
        for (const entry of this.entries$) {
            entry.markAsDirty();
        }
        return this;
    }
    markAsTouched() {
        this.control.markAsTouched();
        for (const entry of this.entries$) {
            entry.markAsTouched();
        }
        return this;
    }
    markAsUnused() {
        this.control.markAsUntouched();
        this.control.markAsPristine();
        for (const entry of this.entries$) {
            entry.markAsUnused();
        }
        return this;
    }
    markAsUsed() {
        this.control.markAsTouched();
        this.control.markAsDirty();
        for (const entry of this.entries$) {
            entry.markAsUsed();
        }
        return this;
    }
    reset(models) {
        this.entries$ = [];
        this.control.clear();
        if (Util.isDefined(models) && _.isArray(models)) {
            for (const model of models) {
                this.push(model);
            }
        }
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,