import { FormControl } from '@angular/forms';
import * as _ from 'underscore';
import { ValidatorRequired } from '../../impl/validation/validator-required';
import { Observable } from 'rxjs';
export class AccessableFormControl {
    control;
    showAs;
    convertTo;
    required$;
    validators$;
    blocked$;
    initialize(formState, validators) {
        this.control = new FormControl(formState, null, null);
        this.validateWith(validators);
        this.setValue(formState);
    }
    validateWith(validators = []) {
        this.validators$ = validators;
        this.control.setValidators(_.map(validators, (v) => {
            return v.validator();
        }));
        this.required$ = false;
        _.each(this.validators$, (v) => {
            if (v instanceof ValidatorRequired) {
                this.required$ = true;
            }
        });
        this.control.updateValueAndValidity();
        return this;
    }
    setValue(value) {
        if (this.showAs) {
            this.control.setValue(this.showAs(value));
        }
        else {
            this.control.setValue(value);
        }
        return this;
    }
    reset(value) {
        if (this.showAs) {
            this.control.reset(this.showAs(value));
        }
        else {
            this.control.reset(value);
        }
        return this;
    }
    markAsUsed() {
        this.control.markAsDirty();
        this.control.markAsTouched();
        this.control.updateValueAndValidity();
        return this;
    }
    markAsUnused() {
        _.each(this.validators$, (validator) => validator.hasError = false);
        this.control.updateValueAndValidity();
        this.control.markAsPristine();
        this.control.markAsUntouched();
        return this;
    }
    markAsDirty() {
        this.control.markAsDirty();
        return this;
    }
    markAsTouched() {
        this.control.markAsTouched();
        return this;
    }
    disable() {
        this.control.disable();
        return this;
    }
    enable() {
        this.control.enable();
        return this;
    }
    blockControls() {
        this.blocked$ = true;
    }
    unblockControls() {
        this.blocked$ = false;
    }
    get disabled() {
        return this.control.disabled;
    }
    get valid() {
        if (this.control.disabled) {
            return true;
        }
        return !this.error;
    }
    get validators() {
        return this.validators$;
    }
    get error() {
        return _.find(this.validators$, (v) => v.hasError);
    }
    get value() {
        if (this.convertTo) {
            return this.convertTo(this.control.value);
        }
        else {
            return this.control.value;
        }
    }
    set value(value) {
        this.setValue(value);
    }
    get valueChanges() {
        return Observable.create((observer) => {
            const sub = this.control.valueChanges
                .subscribe(() => {
                if (!this.blocked) {
                    observer.next(this.value);
                }
            }, null, () => {
                sub.unsubscribe();
            });
        });
    }
    get required() {
        return this.required$;
    }
    get touched() {
        return this.control.touched;
    }
    get dirty() {
        return this.control.dirty;
    }
    get blocked() {
        return this.blocked$;
    }
}
//# sourceMappingURL=data:application/json;base64,