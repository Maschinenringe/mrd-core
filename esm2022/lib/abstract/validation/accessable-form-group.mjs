import { FormGroup } from '@angular/forms';
import * as _ from 'underscore';
import { Util } from '../../impl/util/util';
import { Subject } from 'rxjs';
export class AccessableFormGroup {
    control;
    fields$;
    changed$ = new Subject();
    initialize(fields) {
        this.control = new FormGroup(_.mapObject(fields, (field) => {
            return field.control;
        }));
        this.fields$ = fields;
    }
    markAsUsed() {
        _.each(this.fields$, (field) => field.markAsUsed());
        return this;
    }
    markAsUnused() {
        _.each(this.fields$, (field) => field.markAsUnused());
        return this;
    }
    markAsDirty() {
        _.each(this.fields$, (field) => field.markAsDirty());
        return this;
    }
    markAsTouched() {
        _.each(this.fields$, (field) => field.markAsTouched());
        return this;
    }
    reset(model, propagateChanges = true) {
        if (!Util.isDefined(model)) {
            model = {};
        }
        _.each(this.fields$, (field, key) => field.reset(model[key]));
        if (propagateChanges) {
            this.changed$.next();
        }
        return this;
    }
    get fields() {
        return this.fields$;
    }
    get value() {
        const ret = {};
        _.each(this.fields$, (field, key) => ret[key] = field.value);
        return ret;
    }
    get dirty() {
        return this.control.dirty;
    }
    get valid() {
        return this.control.valid;
    }
    get touched() {
        return this.control.touched;
    }
    disable() {
        this.control.disable();
        return this;
    }
    enable() {
        this.control.enable();
        return this;
    }
    get disabled() {
        return this.control.disabled;
    }
    get enabled() {
        return this.control.enabled;
    }
    get changed() {
        return this.changed$.asObservable();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjZXNzYWJsZS1mb3JtLWdyb3VwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbXJkLWNvcmUvc3JjL2xpYi9hYnN0cmFjdC92YWxpZGF0aW9uL2FjY2Vzc2FibGUtZm9ybS1ncm91cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxLQUFLLENBQUMsTUFBTSxZQUFZLENBQUM7QUFFaEMsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxPQUFPLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFFM0MsTUFBTSxPQUFnQixtQkFBbUI7SUFHaEMsT0FBTyxDQUFZO0lBQ2xCLE9BQU8sQ0FBVTtJQUNqQixRQUFRLEdBQWlCLElBQUksT0FBTyxFQUFFLENBQUM7SUFFeEMsVUFBVSxDQUNmLE1BQWU7UUFFZixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksU0FBUyxDQUMxQixDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQzVCLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FDSCxDQUFDO1FBQ0YsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDeEIsQ0FBQztJQUVNLFVBQVU7UUFDZixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBRSxDQUFDO1FBQ3JELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLFlBQVk7UUFDakIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUUsQ0FBQztRQUN2RCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxXQUFXO1FBQ2hCLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFFLENBQUM7UUFDdEQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sYUFBYTtRQUNsQixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBRSxDQUFDO1FBQ3hELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLEtBQUssQ0FBQyxLQUFhLEVBQUUsbUJBQTRCLElBQUk7UUFDMUQsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDMUIsS0FBSyxHQUFHLEVBQVksQ0FBQztTQUN0QjtRQUNELENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQXVDLEVBQUUsR0FBVyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFeEcsSUFBSSxnQkFBZ0IsRUFBRTtZQUNwQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ3RCO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFHRCxJQUFJLEtBQUs7UUFDUCxNQUFNLEdBQUcsR0FBRyxFQUFZLENBQUM7UUFDekIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBdUMsRUFBRSxHQUFXLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkcsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUM5QixDQUFDO0lBRUQsT0FBTztRQUNMLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDdkIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDdEIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztJQUMvQixDQUFDO0lBRUQsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUM5QixDQUFDO0lBRUQsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RDLENBQUM7Q0FFRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Rm9ybUdyb3VwfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCAqIGFzIF8gZnJvbSAndW5kZXJzY29yZSc7XHJcbmltcG9ydCB7SUFjY2Vzc2FibGVGb3JtQ29udHJvbH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlL3ZhbGlkYXRpb24vaS1hY2Nlc3NhYmxlLWZvcm0tY29udHJvbCc7XHJcbmltcG9ydCB7VXRpbH0gZnJvbSAnLi4vLi4vaW1wbC91dGlsL3V0aWwnO1xyXG5pbXBvcnQgeyBTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWNjZXNzYWJsZUZvcm1Hcm91cDxURmllbGRzLCBUTW9kZWwgZXh0ZW5kcyBvYmplY3Q+XHJcbiAgaW1wbGVtZW50cyBJQWNjZXNzYWJsZUZvcm1Db250cm9sPEFjY2Vzc2FibGVGb3JtR3JvdXA8VEZpZWxkcywgVE1vZGVsPiwgVE1vZGVsPiB7XHJcblxyXG4gIHB1YmxpYyBjb250cm9sOiBGb3JtR3JvdXA7XHJcbiAgcHJpdmF0ZSBmaWVsZHMkOiBURmllbGRzO1xyXG4gIHByaXZhdGUgY2hhbmdlZCQ6IFN1YmplY3Q8YW55PiA9IG5ldyBTdWJqZWN0KCk7XHJcblxyXG4gIHB1YmxpYyBpbml0aWFsaXplKFxyXG4gICAgZmllbGRzOiBURmllbGRzXHJcbiAgKTogdm9pZCB7XHJcbiAgICB0aGlzLmNvbnRyb2wgPSBuZXcgRm9ybUdyb3VwKFxyXG4gICAgICBfLm1hcE9iamVjdChmaWVsZHMsIChmaWVsZCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBmaWVsZC5jb250cm9sO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICAgIHRoaXMuZmllbGRzJCA9IGZpZWxkcztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBtYXJrQXNVc2VkKCk6IEFjY2Vzc2FibGVGb3JtR3JvdXA8VEZpZWxkcywgVE1vZGVsPiB7XHJcbiAgICBfLmVhY2godGhpcy5maWVsZHMkLCAoZmllbGQpID0+IGZpZWxkLm1hcmtBc1VzZWQoKSApO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgbWFya0FzVW51c2VkKCk6IEFjY2Vzc2FibGVGb3JtR3JvdXA8VEZpZWxkcywgVE1vZGVsPiB7XHJcbiAgICBfLmVhY2godGhpcy5maWVsZHMkLCAoZmllbGQpID0+IGZpZWxkLm1hcmtBc1VudXNlZCgpICk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBtYXJrQXNEaXJ0eSgpOiBBY2Nlc3NhYmxlRm9ybUdyb3VwPFRGaWVsZHMsIFRNb2RlbD4ge1xyXG4gICAgXy5lYWNoKHRoaXMuZmllbGRzJCwgKGZpZWxkKSA9PiBmaWVsZC5tYXJrQXNEaXJ0eSgpICk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBtYXJrQXNUb3VjaGVkKCk6IEFjY2Vzc2FibGVGb3JtR3JvdXA8VEZpZWxkcywgVE1vZGVsPiB7XHJcbiAgICBfLmVhY2godGhpcy5maWVsZHMkLCAoZmllbGQpID0+IGZpZWxkLm1hcmtBc1RvdWNoZWQoKSApO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVzZXQobW9kZWw6IFRNb2RlbCwgcHJvcGFnYXRlQ2hhbmdlczogYm9vbGVhbiA9IHRydWUpOiBBY2Nlc3NhYmxlRm9ybUdyb3VwPFRGaWVsZHMsIFRNb2RlbD4ge1xyXG4gICAgaWYgKCFVdGlsLmlzRGVmaW5lZChtb2RlbCkpIHtcclxuICAgICAgbW9kZWwgPSB7fSBhcyBUTW9kZWw7XHJcbiAgICB9XHJcbiAgICBfLmVhY2godGhpcy5maWVsZHMkLCAoZmllbGQ6IElBY2Nlc3NhYmxlRm9ybUNvbnRyb2w8YW55LCBhbnk+LCBrZXk6IHN0cmluZykgPT4gZmllbGQucmVzZXQobW9kZWxba2V5XSkpO1xyXG5cclxuICAgIGlmIChwcm9wYWdhdGVDaGFuZ2VzKSB7XHJcbiAgICAgIHRoaXMuY2hhbmdlZCQubmV4dCgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBnZXQgZmllbGRzKCk6IFRGaWVsZHMge1xyXG4gICAgcmV0dXJuIHRoaXMuZmllbGRzJDtcclxuICB9XHJcblxyXG5cclxuICBnZXQgdmFsdWUoKTogVE1vZGVsIHtcclxuICAgIGNvbnN0IHJldCA9IHt9IGFzIFRNb2RlbDtcclxuICAgIF8uZWFjaCh0aGlzLmZpZWxkcyQsIChmaWVsZDogSUFjY2Vzc2FibGVGb3JtQ29udHJvbDxhbnksIGFueT4sIGtleTogc3RyaW5nKSA9PiByZXRba2V5XSA9IGZpZWxkLnZhbHVlKTtcclxuICAgIHJldHVybiByZXQ7XHJcbiAgfVxyXG5cclxuICBnZXQgZGlydHkoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250cm9sLmRpcnR5O1xyXG4gIH1cclxuXHJcbiAgZ2V0IHZhbGlkKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udHJvbC52YWxpZDtcclxuICB9XHJcblxyXG4gIGdldCB0b3VjaGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udHJvbC50b3VjaGVkO1xyXG4gIH1cclxuXHJcbiAgZGlzYWJsZSgpOiBBY2Nlc3NhYmxlRm9ybUdyb3VwPFRGaWVsZHMsIFRNb2RlbD4ge1xyXG4gICAgdGhpcy5jb250cm9sLmRpc2FibGUoKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgZW5hYmxlKCk6IEFjY2Vzc2FibGVGb3JtR3JvdXA8VEZpZWxkcywgVE1vZGVsPiB7XHJcbiAgICB0aGlzLmNvbnRyb2wuZW5hYmxlKCk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIGdldCBkaXNhYmxlZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRyb2wuZGlzYWJsZWQ7XHJcbiAgfVxyXG5cclxuICBnZXQgZW5hYmxlZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRyb2wuZW5hYmxlZDtcclxuICB9XHJcblxyXG4gIGdldCBjaGFuZ2VkKCk6IE9ic2VydmFibGU8dm9pZD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY2hhbmdlZCQuYXNPYnNlcnZhYmxlKCk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=